// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    }
    @else {
        @content;
    }
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
        // Provide text `[text-{bp}]` attributes for aligning text based on screen size
        [text#{$infix}-center] {
            text-align: center;
        }
        [text#{$infix}-left] {
            text-align: left;
        }
        [text#{$infix}-right] {
            text-align: right;
        }
        [hidden#{$infix}-up] {
            display: none;
        }
    }
    @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
        [hidden#{$infix}-down] {
            display: none;
        }
    }
}

ion-menu {
    .toolbar-background {
        background: url('../assets/img/app/avatar-bg.jpg') no-repeat;
        background-size: 100% auto;
        animation: myfirst 10s infinite;
    }
    @keyframes myfirst {
        0% {
            background-position: 0 0;
        }
        50% {
            background-position: 0 -20px;
        }
        100% {
            background-position: 0 0;
        }
    }
    .menu-box {
        height: 65px;
        width: 100%;
    }
    .menu-icon {
        float: right;
        font-size: 18;
        color: #fff;
        margin: 15px 10px 15px 0;
        font-size: 2.3em;
        font-weight: 800;
    }
    .avatar-box {
        display: flex;
        margin: 8px 8px 8px 0;
        .avatar-left {
            .avatar {
                overflow: hidden;
                margin-left: 35px;
                height: 46px;
                width: 46px;
                border: 3px solid #fff;
                border-radius: 23px;
                img {
                    width: 100%;
                    height: 100%;
                }
            }
        }
        .avatar-right {
            .nickname {
                padding-left: 10px;
                display: inline;
                color: #fff;
                font-size: 20px;
                font-weight: bold;
                line-height: 46px;
            }
        }
    }
    .level {
        color: #ead047;
        font-size: 16px;
        margin-left: 35px;
        padding-bottom: 10px;
    }
    .motto {
        width: 200px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: inline-block;
        font-size: 14px;
        color: #fff;
        margin-left: 35px;
        padding-bottom: 15px;
    }
}

.outer-content {
    .item-ios[detail-push] .item-inner,
    button.item-ios:not([detail-none]) .item-inner,
    a.item-ios:not([detail-none]) .item-inner {
        background-image: none;
    }
    .list-ios .item-block .item-inner {
        border-bottom: none;
    }
    .item-ios.item-block .item-inner {
        padding-right: 8px;
        border-bottom: none;
    }
    .list-ios>.item-block:last-child,
    .list-ios>.item-wrapper:last-child .item-block {
        border-bottom: none;
    }
    .list-ios>.item-block:first-child {
        border-top: none;
    }
    .list-ios>.item-block:first-child {
        border-top: none;
    }
    .list-ios {
        margin: 0;
    }
    .icon-ios-primary {
        color: #3bc4ff;
    }
    .item-ios {
        color: #565c6c;
    }
}

.avatar-left {
    .avatar {
        overflow: hidden;
        margin-left: 2px;
        height: 34px;
        width: 34px;
        border-radius: 17px;
        img {
            width: 100%;
            height: 100%;
        }
    }
}

.right-fsize14 {
    font-size: 14px;
}

.toobar-bg {
    .toolbar-background-ios {
        background: url('../assets/img/app/toolbar-bg.png') repeat-y;
        background-size: 100%;
    }
    .toolbar-ios {
        min-height: 55px;
    }
    .toolbar-title-ios {
        font-weight: normal;
        color: #fff;
    }
}

.more-list {
    .item-ios[detail-push] .item-inner,
    button.item-ios:not([detail-none]) .item-inner,
    a.item-ios:not([detail-none]) .item-inner {
        background-image: none;
    }
    .list-ios .item-block .item-inner {
        border-bottom: none;
    }
    .item-ios.item-block .item-inner {
        border-bottom: none;
    }
}

.list-ios>.item-block:first-child {
    border-top: none;
}

.list-ios>.item-block:last-child,
.list-ios>.item-wrapper:last-child .item-block {
    border-bottom: none;
}

.list-ios {
    margin: 0 3px;
}